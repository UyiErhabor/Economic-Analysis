# =================================================================================
# SETUP AND DATA LOADING
# All imports and file uploads are consolidated at the top for better readability
# and adherence to best practices.
# =================================================================================

# Import all necessary libraries
from google.colab import files
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import seaborn as sns
from matplotlib.ticker import FuncFormatter

# Note: The `files.upload()` function will prompt you to upload each file interactively.
# You will need to upload all four files:
# 'us_inequality.csv', 'france_inequality.csv', 'global_deaths.csv', and 'uk_gdp_2012_2022.csv'
upload_db = files.upload()

# Load the datasets into pandas DataFrames
us_inequality = pd.read_csv('us_inequality.csv')
france_inequality = pd.read_csv('france_inequality.csv')
global_deaths = pd.read_csv('global_deaths.csv')
uk_gdp_2012_2022 = pd.read_csv('uk_gdp_2012_2022.csv')


# =================================================================================
# DATA EXPLORATION
# Displaying column names and head for initial inspection of each DataFrame.
# =================================================================================

print("US Inequality Columns:")
print(us_inequality.columns)
print("\nFrance Inequality Columns:")
print(france_inequality.columns)
print("\nUS Inequality Head:")
us_inequality.head()
print("\nFrance Inequality Head:")
france_inequality.head()

print("\nGlobal Deaths Columns:")
print(global_deaths.columns)
print("\nGlobal Deaths Head:")
global_deaths.head()

# =================================================================================
# PLOT 1: ECONOMIC INEQUALITY IN THE US AND FRANCE
# =================================================================================

def _plot_series(series, series_name, color='blue'):
    """
    Helper function to plot a single series with a text label at the end.
    
    Args:
        series (pd.DataFrame): DataFrame containing 'Year' and 'Inequality Index'.
        series_name (str): The name of the series for the label.
        color (str): The color for the plot line and text label.
    """
    # Plot the line without a 'label' argument for auto-legend inclusion
    plt.plot(series['Year'], series['Inequality Index'], color=color)

    # Add the label directly to the line using plt.text()
    last_year = series['Year'].iloc[-1]
    last_index = series['Inequality Index'].iloc[-1]

    # Adjust x_offset to move the label slightly past the end of the line
    x_offset = 1 # You can adjust this value to move the label further to the right

    plt.text(last_year + x_offset, last_index, series_name,
             color=color, ha='left', va='center', fontsize=9)


# Create the plot figure and axes
fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')

# Plot US inequality
df_sorted_us = us_inequality.sort_values('Year', ascending=True)
_plot_series(df_sorted_us, 'US', color='blue')

# Plot France inequality
df_sorted_france = france_inequality.sort_values('Year', ascending=True)
_plot_series(df_sorted_france, 'France', color='red')

# Remove top and right spines from the plot
sns.despine(fig=fig, ax=ax)

# Set labels with increased font size
plt.xlabel('Year', fontsize=11.5)
_ = plt.ylabel('Top 1% Wealth Share (%)', fontsize=11.5)

# Add vertical lines to mark key historical events
plt.axvline(x=1929, color='black', linestyle='--', linewidth=1.5, label='Great Depression (1929)')
plt.axvline(x=1945, color='black', linestyle=':', linewidth=2, label='End of WWII (1945)')
plt.axvline(x=1980, color='black', linestyle='-.', linewidth=2.5, label='Modern Era (1980)')

# Add a legend for the vertical lines
plt.legend()

# Set the title with increased font size
plt.title('Economic Inequality in the US and France over time', fontsize=12)
plt.show()


# =================================================================================
# PLOT 2: HOW CAUSES OF DEATH CHANGE WITH AGE
# =================================================================================

# Calculate proportions of deaths for each age group
total_deaths_15_49 = global_deaths["Deaths (15-49)"].sum()
total_deaths_50_69 = global_deaths["Deaths (50-69)"].sum()

global_deaths["Prop_15_49"] = (global_deaths["Deaths (15-49)"] / total_deaths_15_49) * 100
global_deaths["Prop_50_69"] = (global_deaths["Deaths (50-69)"] / total_deaths_50_69) * 100

# Select top causes for storytelling
num_causes_to_show = 7
top_in_15_49 = global_deaths.nlargest(num_causes_to_show, "Prop_15_49")
top_in_50_69 = global_deaths.nlargest(num_causes_to_show, "Prop_50_69")

story_df = pd.concat([top_in_15_49, top_in_50_69]).drop_duplicates(subset=['Cause of Death'])
story_df['Prop_Difference'] = story_df['Prop_50_69'] - story_df['Prop_15_49']
story_df = story_df.sort_values(by='Prop_Difference', ascending=True).reset_index(drop=True)

# Plot the horizontal bar chart
fig, ax = plt.subplots(figsize=(12, max(7, len(story_df) * 0.7)))

bar_height = 0.35
y_pos = np.arange(len(story_df))

color_50_69 = "#1f77b4"
color_15_49 = "#ff7f0e"

ax.barh(y_pos + bar_height/2, story_df["Prop_50_69"], height=bar_height,
        color=color_50_69, label="Age 50-69")
ax.barh(y_pos - bar_height/2, story_df["Prop_15_49"], height=bar_height,
        color=color_15_49, label="Age 15-49")

ax.set_yticks(y_pos)
ax.set_yticklabels(story_df["Cause of Death"], fontsize=10)
ax.set_xlabel("Percentage of Deaths within Age Group (%)", fontsize=12)
ax.set_title("How Causes of Death Change with Age", fontsize=16, fontweight='bold')
ax.text(0.5, 1.08,
        'Chronic diseases tend to dominate later life, while injuries and infections are more lethal earlier on.',
        horizontalalignment='center', fontsize=11, color='gray', transform=ax.transAxes)

ax.legend(loc='upper right', fontsize=10)
ax.invert_yaxis()

# Style the chart spines
ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
ax.spines['left'].set_linewidth(0.5)
ax.spines['bottom'].set_linewidth(0.5)

# Highlight chronic diseases and injuries/infections
chronic_like = story_df["Cause of Death"].str.contains(
    "Cancer|Cardiovascular|Respiratory|Kidney|Liver|Parkinson|Diabetes",
    case=False, regex=True)
chronic_idxs = story_df[chronic_like].index

injury_like = story_df["Cause of Death"].str.contains(
    "Suicide|Homicide|HIV|Drug|Diarrheal|Tuberculosis|Drowning|Road|Lower respiratory",
    case=False, regex=True) & ~chronic_like
injury_idxs = story_df[injury_like].index

if not injury_idxs.empty:
    ymin, ymax = y_pos[injury_idxs.min()] - 0.6, y_pos[injury_idxs.max()] + 0.6
    ax.axhspan(ymin, ymax, color='mistyrose', alpha=0.3)
    ax.text(1.01, (ymin + ymax) / 2, 'Injuries & Infections',
            color='darkred', fontsize=11, weight='bold',
            ha='left', va='center', transform=ax.get_yaxis_transform())

if not chronic_idxs.empty:
    ymin, ymax = y_pos[chronic_idxs.min()] - 0.6, y_pos[chronic_idxs.max()] + 0.6
    ax.axhspan(ymin, ymax, color='lightcyan', alpha=0.3)
    ax.text(1.01, (ymin + ymax) / 2, 'Chronic Diseases',
            color='darkblue', fontsize=11, weight='bold',
            ha='left', va='center', transform=ax.get_yaxis_transform())

plt.tight_layout()
plt.show()

# =================================================================================
# PLOT 3: UK GDP (2012-2022)
# =================================================================================

# Work on a copy of the DataFrame
df = uk_gdp_2012_2022.copy()

# Convert GDP to billions for better readability
df['GDP'] = df['GDP'] / 1_000

# Create the plot
fig, ax = plt.subplots(figsize=(16, 9))
plt.subplots_adjust(bottom=0.3, right=0.8)

# Plot the GDP trend line
ax.plot(df['Year'], df['GDP'], color='#1f77b4', linewidth=2, label='UK GDP')

# Highlight the COVID-19 Impact period
covid_start_year = 2020.0
covid_recovery_end_year = 2021.0
ax.axvspan(covid_start_year, covid_recovery_end_year, color='red', alpha=0.15, label='COVID-19 Pandemic Impact')
ax.axvline(x=covid_start_year, color='red', linestyle='--', linewidth=1.5, label='Start of COVID-19 (2020 Q1)')

# Annotations to tell the story
gdp_2014_Q2 = df[df['Year'] == 2014.25]['GDP'].iloc[0]
gdp_2020_Q1 = df[df['Year'] == 2020.0]['GDP'].iloc[0]
gdp_2020_Q2 = df[df['Year'] == 2020.25]['GDP'].iloc[0]
gdp_2021_Q2 = df[df['Year'] == 2021.25]['GDP'].iloc[0]

percent_decrease_2020 = ((gdp_2020_Q1 - gdp_2020_Q2) / gdp_2020_Q1) * 100
percent_decrease_text = f"a {percent_decrease_2020:.1f}% decrease"

ax.annotate('Increases in GDP between 2012 - 2020 in the UK',
            xy=(2014.25, gdp_2014_Q2),
            xytext=(2011.8, 445),
            xycoords='data', textcoords='data',
            arrowprops=dict(facecolor='black', shrink=0.05, width=1, headwidth=6, connectionstyle="arc3,rad=0"),
            fontsize=10, color='black',
            horizontalalignment='left', verticalalignment='top',
            bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="none", alpha=0.7),
            wrap=True)

ax.annotate(f'Sharp decline in GDP by 21% in Q2 2020 relative to Q1 2020 due to less economic activity. For example, UK citizens working in industries such as hospitality were furloughed and the demand of corresponding consumers in those sectors naturally declined',
            xy=(2020.25, gdp_2020_Q2),
            xytext=(ax.get_xlim()[1] + 0.5, 470),
            xycoords='data', textcoords='data',
            arrowprops=dict(facecolor='black', shrink=0.05, width=1, headwidth=6, connectionstyle="arc3,rad=0"),
            fontsize=10, color='black',
            fontweight='normal',
            horizontalalignment='left', verticalalignment='center',
            bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="none", alpha=0.7),
            wrap=True)

ax.annotate('Post-lockdown recovery in GDP growth',
            xy=(2021.25, gdp_2021_Q2),
            xytext=(ax.get_xlim()[1] + 0.5, 550),
            xycoords='data', textcoords='data',
            arrowprops=dict(facecolor='black', shrink=0.05, width=1, headwidth=6, connectionstyle="arc3,rad=0"),
            fontsize=10, color='black',
            horizontalalignment='left', verticalalignment='center',
            bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="none", alpha=0.7),
            wrap=True)

# Plot Aesthetics and Labels
sns.despine(fig=fig, ax=ax)
ax.set_xlabel('Year', fontsize=12, fontweight='bold')
ax.set_ylabel('GDP (£ Billions)', fontsize=12, fontweight='bold')
ax.set_title('UK GDP (2012-2022)', fontsize=16, fontweight='bold')

ax.set_xlim(2011.5, 2023.5)
major_ticks = np.arange(int(df['Year'].min()), int(df['Year'].max()) + 2, 2)
ax.set_xticks(major_ticks)
minor_ticks = np.arange(df['Year'].min(), df['Year'].max() + 0.25, 0.25)
ax.set_xticks(minor_ticks, minor=True)

def format_year_label(x, pos):
    return f"{int(x)}"

ax.xaxis.set_major_formatter(FuncFormatter(format_year_label))
ax.tick_params(axis='x', rotation=0)

ax.legend(loc='upper left', fontsize=10)

plt.show()
