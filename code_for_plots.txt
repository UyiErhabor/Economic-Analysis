# SETUP
from google.colab import files
upload_db = files.upload()
upload_db = files.upload()
import pandas as pd
import numpy as np

# returns df col names and df head
us_inequality= pd.read_csv('us_inequality.csv')
france_inequality= pd.read_csv('france_inequality.csv')
print(us_inequality.columns)
print(france_inequality.columns)

us_inequality.head()

france_inequality.head()

from matplotlib import pyplot as plt
import seaborn as sns

def _plot_series(series, series_name, color='blue'):
    # Plot the line without a 'label' argument for auto-legend inclusion
    plt.plot(series['Year'], series['Inequality Index'], color=color)

    # Add the label directly to the line using plt.text()
    # We'll place it near the end of the line
    last_year = series['Year'].iloc[-1]
    last_index = series['Inequality Index'].iloc[-1]

    # Adjust x_offset to move the label slightly past the end of the line
    x_offset = 1 # You can adjust this value to move the label further to the right

    plt.text(last_year + x_offset, last_index, series_name,
             color=color, ha='left', va='center', fontsize=9)


fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')

# Plot US inequality
df_sorted_us = us_inequality.sort_values('Year', ascending=True)
_plot_series(df_sorted_us, 'US', color='blue') # Pass 'US' as series_name

# Assuming france_inequality is also a DataFrame with 'Year' and 'Inequality Index'
df_sorted_france = france_inequality.sort_values('Year', ascending=True)
_plot_series(df_sorted_france, 'France', color='red') # Pass 'France' as series_name

sns.despine(fig=fig, ax=ax)

# Increase fontsize and bold for x and y labels
plt.xlabel('Year', fontsize=11.5) # Increased font size and made bold
_ = plt.ylabel('Top 1% Wealth Share (%)', fontsize=11.5) # Increased font size and made bold

# Add vertical lines, all in black, with distinct line styles and varying widths
# Keep their labels for the legend
plt.axvline(x=1929, color='black', linestyle='--', linewidth=1.5, label='Great Depression (1929)')
plt.axvline(x=1945, color='black', linestyle=':', linewidth=2, label='End of WWII (1945)')
plt.axvline(x=1980, color='black', linestyle='-.', linewidth=2.5, label='Modern Era (1980)')

# Call plt.legend() without arguments. It will automatically pick up labels
# that were explicitly set, which now are only the axvline labels.
plt.legend()

# Increase fontsize and bold for the chart title
plt.title('Economic Inequality in the US and France over time', fontsize=12) # Increased font size and made bold
plt.show()

upload_db = files.upload()

# returns df col names and df head
global_deaths= pd.read_csv('global_deaths.csv')
print(global_deaths.columns)

global_deaths.head()

# Calculate proportions
total_deaths_15_49 = global_deaths["Deaths (15-49)"].sum()
total_deaths_50_69 = global_deaths["Deaths (50-69)"].sum()

global_deaths["Prop_15_49"] = (global_deaths["Deaths (15-49)"] / total_deaths_15_49) * 100
global_deaths["Prop_50_69"] = (global_deaths["Deaths (50-69)"] / total_deaths_50_69) * 100

# Select top causes for storytelling
num_causes_to_show = 7
top_in_15_49 = global_deaths.nlargest(num_causes_to_show, "Prop_15_49")
top_in_50_69 = global_deaths.nlargest(num_causes_to_show, "Prop_50_69")

story_df = pd.concat([top_in_15_49, top_in_50_69]).drop_duplicates(subset=['Cause of Death'])
story_df['Prop_Difference'] = story_df['Prop_50_69'] - story_df['Prop_15_49']
story_df = story_df.sort_values(by='Prop_Difference', ascending=True).reset_index(drop=True)

# Plot
fig, ax = plt.subplots(figsize=(12, max(7, len(story_df) * 0.7)))

bar_height = 0.35
y_pos = np.arange(len(story_df))

color_50_69 = "#1f77b4"
color_15_49 = "#ff7f0e"

ax.barh(y_pos + bar_height/2, story_df["Prop_50_69"], height=bar_height,
        color=color_50_69, label="Age 50-69")
ax.barh(y_pos - bar_height/2, story_df["Prop_15_49"], height=bar_height,
        color=color_15_49, label="Age 15-49")

ax.set_yticks(y_pos)
ax.set_yticklabels(story_df["Cause of Death"], fontsize=10)
ax.set_xlabel("Percentage of Deaths within Age Group (%)", fontsize=12)
ax.set_title("How Causes of Death Change with Age", fontsize=16, fontweight='bold')
ax.text(0.5, 1.08,
        'Chronic diseases tend to dominate later life, while injuries and infections are more lethal earlier on.',
        horizontalalignment='center', fontsize=11, color='gray', transform=ax.transAxes)

ax.legend(loc='upper right', fontsize=10)
ax.invert_yaxis()

ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
ax.spines['left'].set_linewidth(0.5)
ax.spines['bottom'].set_linewidth(0.5)

# Highlight areas
# Identify chronic diseases first
chronic_like = story_df["Cause of Death"].str.contains(
    "Cancer|Cardiovascular|Respiratory|Kidney|Liver|Parkinson|Diabetes",
    case=False, regex=True)
chronic_idxs = story_df[chronic_like].index

# Then, identify injuries/infections EXCLUDING chronic
injury_like = story_df["Cause of Death"].str.contains(
    "Suicide|Homicide|HIV|Drug|Diarrheal|Tuberculosis|Drowning|Road|Lower respiratory",
    case=False, regex=True) & ~chronic_like
injury_idxs = story_df[injury_like].index

if not injury_idxs.empty:
    ymin, ymax = y_pos[injury_idxs.min()] - 0.6, y_pos[injury_idxs.max()] + 0.6
    ax.axhspan(ymin, ymax, color='mistyrose', alpha=0.3)
    ax.text(1.01, (ymin + ymax) / 2, 'Injuries & Infections',
            color='darkred', fontsize=11, weight='bold',
            ha='left', va='center', transform=ax.get_yaxis_transform())

if not chronic_idxs.empty:
    ymin, ymax = y_pos[chronic_idxs.min()] - 0.6, y_pos[chronic_idxs.max()] + 0.6
    ax.axhspan(ymin, ymax, color='lightcyan', alpha=0.3)
    ax.text(1.01, (ymin + ymax) / 2, 'Chronic Diseases',
            color='darkblue', fontsize=11, weight='bold',
            ha='left', va='center', transform=ax.get_yaxis_transform())

plt.tight_layout()
plt.show()

upload_db = files.upload()

# Assuming 'uk_gdp_2012_2022.csv' has columns 'Year' and 'GDP'
uk_gdp_2012_2022 = pd.read_csv('uk_gdp_2012_2022.csv')

# Use the existing DataFrame
df = uk_gdp_2012_2022.copy() # Work on a copy to avoid modifying the original if not intended

# Convert GDP to billions for better readability on the y-axis
# The column is now directly named 'GDP' after division
df['GDP'] = df['GDP'] / 1_000

# Create the plot
# Adjusted figsize width and height to accommodate text on the right and below
fig, ax = plt.subplots(figsize=(16, 9)) # Increased width to 16
plt.subplots_adjust(bottom=0.3, right=0.8) # Adjusted margins for text placement

# Plot the GDP trend line using the updated 'GDP' column
ax.plot(df['Year'], df['GDP'], color='#1f77b4', linewidth=2, label='UK GDP')

# --- Highlight the COVID-19 Impact ---
# The pandemic hit at the beginning of 2020.
# We'll highlight the period of the initial sharp drop and recovery.
covid_start_year = 2020.0
covid_recovery_end_year = 2021.0 # Approximate end of the initial sharp recovery phase

# Re-enabled the shaded region for the main impact period to highlight the decline
ax.axvspan(covid_start_year, covid_recovery_end_year, color='red', alpha=0.15, label='COVID-19 Pandemic Impact')

# Re-added the vertical line for the exact start of 2020
ax.axvline(x=covid_start_year, color='red', linestyle='--', linewidth=1.5, label='Start of COVID-19 (2020 Q1)')


# --- Annotations to tell the story ---
# Find key GDP values for annotations
gdp_2014_Q2 = df[df['Year'] == 2014.25]['GDP'].iloc[0] # Mid-point of early growth
gdp_2019_Q4 = df[df['Year'] == 2019.75]['GDP'].iloc[0] # Peak before decline
gdp_2020_Q1 = df[df['Year'] == 2020.0]['GDP'].iloc[0] # GDP at 2020 Q1
gdp_2020_Q2 = df[df['Year'] == 2020.25]['GDP'].iloc[0] # Trough of decline
gdp_2021_Q2 = df[df['Year'] == 2021.25]['GDP'].iloc[0] # Mid-point of recovery
gdp_2022_Q2 = df[df['Year'] == 2022.5]['GDP'].iloc[0] # Latest point for recovery arrow

# Calculate percentage decrease from 2020 Q1 to 2020 Q2
percent_decrease_2020 = ((gdp_2020_Q1 - gdp_2020_Q2) / gdp_2020_Q1) * 100
percent_decrease_text = f"a {percent_decrease_2020:.1f}% decrease" # Format to one decimal place

# Annotation for natural increases in GDP (moved inside the plot and formatted as paragraph)
# Adjusted xytext to be further left and slightly down to avoid clutter
ax.annotate('Increases in GDP between 2012 - 2020 in the UK',
            xy=(2014.25, gdp_2014_Q2), # Arrow tip points to a point on the early growth curve
            xytext=(2011.8, 445), # Adjusted text position further left and slightly down
            xycoords='data', textcoords='data', # Both in data coordinates
            arrowprops=dict(facecolor='black', shrink=0.05, width=1, headwidth=6, connectionstyle="arc3,rad=0"), # Straight arrow
            fontsize=10, color='black', # Increased fontsize
            horizontalalignment='left', verticalalignment='top', # Changed to left and top for paragraph-like appearance
            bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="none", alpha=0.7),
            wrap=True)

# Annotation for the sharp decline (right of graph, same area as Post-Lockdown Recovery)
ax.annotate(f'Sharp decline in GDP by 21% in Q2 2020 relative to Q1 2020 due to less economic activity. For example, UK citizens working in industries such as hospitality were furloughed and the demand of corresponding consumers in those sectors naturally declined',
            xy=(2020.25, gdp_2020_Q2), # Arrow tip points to the trough
            xytext=(ax.get_xlim()[1] + 0.5, 470), # Text position: right of plot, adjusted Y
            xycoords='data', textcoords='data', # Both in data coordinates
            arrowprops=dict(facecolor='black', shrink=0.05, width=1, headwidth=6, connectionstyle="arc3,rad=0"), # Straight arrow
            fontsize=10, color='black', # Increased fontsize
            fontweight='normal', # Reverted to normal (unbolded)
            horizontalalignment='left', verticalalignment='center', # Align left for text on the right
            bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="none", alpha=0.7),
            wrap=True)

# Annotation for post-lockdown recovery (right of graph, aligned with Y-axis label)
ax.annotate('Post-lockdown recovery in GDP growth',
            xy=(2021.25, gdp_2021_Q2), # Adjusted arrow tip to point to 2021 Q2 for middle of recovery
            xytext=(ax.get_xlim()[1] + 0.5, 550), # Text position: right of plot, aligned with y-axis value
            xycoords='data', textcoords='data', # Both in data coordinates
            arrowprops=dict(facecolor='black', shrink=0.05, width=1, headwidth=6, connectionstyle="arc3,rad=0"), # Straight arrow
            fontsize=10, color='black',
            horizontalalignment='left', verticalalignment='center', # Align left for text on the right
            bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="none", alpha=0.7),
            wrap=True)


# --- Plot Aesthetics and Labels ---
sns.despine(fig=fig, ax=ax) # Remove top and right spines

ax.set_xlabel('Year', fontsize=12, fontweight='bold')
ax.set_ylabel('GDP (£ Billions)', fontsize=12, fontweight='bold')
ax.set_title('UK GDP (2012-2022)', fontsize=16, fontweight='bold')

# Extend x-axis limits to make space for text on the right
ax.set_xlim(2011.5, 2023.5) # Extended x-axis to accommodate text on the right

# Set major ticks for every year
major_ticks = np.arange(int(df['Year'].min()), int(df['Year'].max()) + 2, 2) # Every two years
ax.set_xticks(major_ticks)

# Set minor ticks for every quarter
minor_ticks = np.arange(df['Year'].min(), df['Year'].max() + 0.25, 0.25)
ax.set_xticks(minor_ticks, minor=True)

# Format major x-axis labels to show only the year
def format_year_label(x, pos):
    return f"{int(x)}"

ax.xaxis.set_major_formatter(FuncFormatter(format_year_label))

# Removed gridlines for both major and minor ticks
# ax.grid(which='major', linestyle=':', linewidth='0.5', color='gray')
# ax.grid(which='minor', linestyle=':', linewidth='0.25', color='lightgray')


ax.tick_params(axis='x', rotation=0) # Set rotation to 0 for no angle

# Add a legend
ax.legend(loc='upper left', fontsize=10)

plt.show()
